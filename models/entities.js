// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Entities = sequelize.define('entities', {
    name: {
      type: DataTypes.STRING,
    },
    entityType: {
      type: DataTypes.INTEGER,
      defaultValue: 'Choisir le type d\'entitié',
    },
    enterpriseType: {
      type: DataTypes.INTEGER,
      defaultValue: 'Choisir le type d\'entreprise',
    },
    socialType: {
      type: DataTypes.INTEGER,
      defaultValue: 'Choisir le type social',
    },
    siret: {
      type: DataTypes.STRING,
    },
    bic: {
      type: DataTypes.STRING,
    },
    iban: {
      type: DataTypes.STRING,
    },
    rum: {
      type: DataTypes.STRING,
    },
    billingAddress: {
      type: DataTypes.STRING,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    parentId: {
      type: DataTypes.INTEGER,
    },
    archived: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    archivedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'entities',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Entities.associate = (models) => {
    Entities.hasMany(models.consumptionPoints);
    Entities.hasMany(models.deals);
    Entities.hasMany(models.products);
    Entities.hasOne(models.contacts)
    Entities.belongsTo(models.entities, {
      foreignKey: 'parent_id'
    });
    Entities.hasMany(models.entities, {
      foreignKey: 'parent_id',
      as: 'Childs'
    });
  };

  return Entities;
};
