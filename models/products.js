// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Products = sequelize.define('products', {
    productionStart: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    productionEnd: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    label: {
      type: DataTypes.STRING,
    },
    price: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('0.0'),
    },
    devise: {
      type: DataTypes.STRING,
    },
    volume: {
      type: DataTypes.INTEGER,
    },
    register: {
      type: DataTypes.INTEGER,
    },
    pnl: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('0.0'),
    },
    origoEnergy: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    technoId: {
      type: DataTypes.BIGINT,
    },
    geographicZoneId: {
      type: DataTypes.BIGINT,
    },
    dealId: {
      type: DataTypes.BIGINT,
    },
    brokerFees: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('0.0'),
    },
    position: {
      type: DataTypes.INTEGER,
      defaultValue: 'Selectioner la position',
    },
    deliveryMode: {
      type: DataTypes.INTEGER,
      defaultValue: 'Choisir le mode de livraison',
    },
    deliveryDeadline: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    effectiveDelivery: {
      type: DataTypes.DATE,
    },
    brokerName: {
      type: DataTypes.STRING,
    },
    deliveryMailSent: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    entityId: {
      type: DataTypes.BIGINT,
    },
    definitif: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    deliveryClient: {
      type: DataTypes.DATE,
    },
    technoBis: {
      type: DataTypes.ARRAY(DataTypes.STRING),
    },
    subvention: {
      type: DataTypes.BOOLEAN,
    },
    labelFees: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('0.0'),
    },
    cancelFees: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('0.0'),
    },
    commentProduct: {
      type: DataTypes.TEXT,
    },
    technoDeliveryId: {
      type: DataTypes.STRING,
    },
    prePaid: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    geographicZoneDeliveryId: {
      type: DataTypes.STRING,
    },
    exchangeRate: {
      type: DataTypes.FLOAT,
    },
    paymentDelivery: {
      type: DataTypes.DATE,
    },
    validityPeriod: {
      type: DataTypes.INTEGER,
    },
    nFacture: {
      type: DataTypes.STRING,
    },
    indexedPrice: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    tva: {
      type: DataTypes.INTEGER,
      defaultValue: '',
    },
    gridConnected: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    centraleDate: {
      type: DataTypes.DATE,
    },
    deliveryRequirement: {
      type: DataTypes.STRING,
    },
  }, {
    tableName: 'products',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Products.associate = (models) => {
    Products.belongsTo(models.deals, {
      foreignKey: 'deal_id',
      as: 'deal'
    });
    Products.belongsTo(models.entities, {
      foreignKey: 'entity_id',
      as: 'entity'
    });
    Products.belongsTo(models.technos, {
      foreignKey: {
        field: 'techno_id',
        allowNull: false
      },
      as: 'techno'
    });
    Products.belongsTo(models.geographicZones, {
      foreignKey: {
        field: 'geographic_zone_id',
        allowNull: false
      },
      as: 'geographicZone',
    });
  };

  return Products;
};
